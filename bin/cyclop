#!/usr/bin/env ruby

require "optparse"
require "cyclop"

options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: cyclop [options]"
  opts.on("-c", "--config CONFIG", "Read config from CONFIG file") do |c|
    options[:config] = c
  end
  opts.on("-h", "--help", "Display more help") do |h|
    options[:help] = h
  end
  opts.on("-V", "--version", "Display version") do |v|
    puts Cyclop::VERSION
    exit
  end
end
opts.parse!

if options[:config] && !options[:help]
  unless File.exists?(options[:config]) && File.readable?(options[:config])
    puts "Config file '#{options[:config]}' do not exists or is not readable."
    exit(1)
  end

  config = nil
  begin
    config = YAML::load File.read options[:config]
  rescue ArgumentError
  end
  unless config
    puts "Config file '#{options[:config]}' format is invalid."
    exit(1)
  end
  
  begin
    master = Cyclop::Worker.new config
  rescue ArgumentError
    puts $!.message
  else
    master.run
  end
else
  puts opts
  if options[:help]
    puts <<-EOS

    Minimal valid YAML config file:

      mongo:
        database: "cyclop"

    Example YAML config file with more options:
    
      # Optional: only process jobs from the specified queues
      queues: [
        "email", "cache"
      ]
      # Limit this worker to job queued by this host
      # use "localhost" to let Cyclop set it to the host running the worker
      limit_to_host: "server1.mydomain.tld"
      # Load actions in this directory (default to ./actions)
      actions: "/app/actions"
      sleep_interval: 0.5 # in seconds
      log_file: "/var/log/cyclop.log" # will log to STDOUT if missing
      mongo:
        database: "cyclop"
        log: true # for debug only

        # Without replica sets
        host: "127.0.0.1" # will default to "127.0.0.1"
        port: 27017 # will default to 27017

        # Uncomment the following lines if you use a replica set
        # hosts: [
        #   ["127.0.0.1", 27017], ["10.0.0.2", 27017]
        # ]
        # rs_name: "production"
        # read_secondary: true
    EOS
  end
end